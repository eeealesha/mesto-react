{"ast":null,"code":"class Api {\n  constructor(options) {\n    this.baseUrl = options.baseUrl;\n    this.headers = options.headers;\n  }\n\n  _response(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(new Error(`Ошибка: ${res.status}`));\n  }\n\n  getUserInfo() {\n    return fetch(`${this.baseUrl}/users/me`, {\n      headers: this.headers\n    }).then(this._response);\n  }\n\n  sendUserInfo(userName, userAbout) {\n    return fetch(`${this.baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        name: userName,\n        about: userAbout\n      })\n    }).then(this._response);\n  }\n\n  sendUserAvatar(userAvatar) {\n    return fetch(`${this.baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: userAvatar\n      })\n    }).then(this._response);\n  }\n\n  getInitialCards() {\n    return fetch(`${this.baseUrl}/cards`, {\n      method: \"GET\",\n      headers: this.headers\n    }).then(this._response);\n  }\n\n  postNewCard(cardName, cardLink) {\n    return fetch(`${this.baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this.headers,\n      body: JSON.stringify({\n        name: cardName,\n        link: cardLink\n      })\n    }).then(this._response);\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this.baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this.headers\n    }).then(this._response);\n  }\n\n  addLike(cardId) {\n    return fetch(`${this.baseUrl}/cards/likes/${cardId}`, {\n      method: \"PUT\",\n      headers: this.headers\n    }).then(this._response);\n  }\n\n  removeLike(cardId) {\n    return fetch(`${this.baseUrl}/cards/likes/${cardId}`, {\n      method: \"DELETE\",\n      headers: this.headers\n    }).then(this._response);\n  }\n\n} // Создаем экземпляр класса АПИ с нашими настройками\n\n\nexport const api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-16\",\n  headers: {\n    authorization: \"2cbbf139-db5f-40de-8d4c-6c77fbe4b91c\",\n    \"Content-Type\": \"application/json\"\n  }\n});","map":{"version":3,"sources":["/Users/alexeygavrilov/Desktop/dev/mesto-react/src/utils/api.js"],"names":["Api","constructor","options","baseUrl","headers","_response","res","ok","json","Promise","reject","Error","status","getUserInfo","fetch","then","sendUserInfo","userName","userAbout","method","body","JSON","stringify","name","about","sendUserAvatar","userAvatar","avatar","getInitialCards","postNewCard","cardName","cardLink","link","deleteCard","cardId","addLike","removeLike","api","authorization"],"mappings":"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","sourcesContent":["class Api {\n  constructor(options) {\n    this.baseUrl = options.baseUrl;\n    this.headers = options.headers;\n  }\n\n  _response(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(new Error(`Ошибка: ${res.status}`));\n  }\n\n  getUserInfo() {\n    return fetch(`${this.baseUrl}/users/me`, {\n      headers: this.headers,\n    }).then(this._response);\n  }\n\n  sendUserInfo(userName, userAbout) {\n    return fetch(`${this.baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        name: userName,\n        about: userAbout,\n      }),\n    }).then(this._response);\n  }\n\n  sendUserAvatar(userAvatar) {\n    return fetch(`${this.baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: userAvatar,\n      }),\n    }).then(this._response);\n  }\n\n  getInitialCards() {\n    return fetch(`${this.baseUrl}/cards`, {\n      method: \"GET\",\n      headers: this.headers,\n    }).then(this._response);\n  }\n\n  postNewCard(cardName, cardLink) {\n    return fetch(`${this.baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this.headers,\n      body: JSON.stringify({\n        name: cardName,\n        link: cardLink,\n      }),\n    }).then(this._response);\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this.baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this.headers,\n    }).then(this._response);\n  }\n\n  addLike(cardId) {\n    return fetch(`${this.baseUrl}/cards/likes/${cardId}`, {\n      method: \"PUT\",\n      headers: this.headers,\n    }).then(this._response);\n  }\n\n  removeLike(cardId) {\n    return fetch(`${this.baseUrl}/cards/likes/${cardId}`, {\n      method: \"DELETE\",\n      headers: this.headers,\n    }).then(this._response);\n  }\n}\n\n// Создаем экземпляр класса АПИ с нашими настройками\nexport const api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-16\",\n  headers: {\n    authorization: \"2cbbf139-db5f-40de-8d4c-6c77fbe4b91c\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}